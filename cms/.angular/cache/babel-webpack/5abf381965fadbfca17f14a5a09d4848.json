{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //import {MOCKCONTACTS} from './MOCKCONTACTS';\n\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    //private contactsListClone: Contact [] =[];\n    constructor(HTTP) {\n      this.HTTP = HTTP;\n      this.contactSelectedEvent = new EventEmitter();\n      this.contactChangedEvent = new EventEmitter();\n      this.contactListChangedEvent = new Subject(); //HTTP_URL = environment.apiURL + \"/contacts.json\";\n\n      this.HTTP_URL = environment.LOCALURL + \"contacts\";\n      this.contacts = []; // this.contacts = MOCKCONTACTS;\n      // this.maxContactId = this.getMaxId();\n\n      this.HTTP.get(this.HTTP_URL).subscribe(contactList => {\n        console.log(contactList);\n        this.contacts = contactList;\n        this.maxContactId = this.getMaxId();\n        this.contacts.sort((a, b) => parseInt(a.id) > parseInt(b.id) ? 1 : 0);\n        this.contactListChangedEvent.next(this.contacts.slice());\n      }, error => {\n        console.log(error);\n      });\n      console.log(this.contacts);\n    }\n\n    getMaxId() {\n      let maxId = 0;\n\n      for (const contact of this.contacts) {\n        const currentId = parseInt(contact.id, 10);\n        if (currentId > maxId) maxId = currentId;\n      }\n\n      return maxId;\n    }\n\n    getContacts() {\n      return this.contacts.slice();\n    }\n\n    getContact(id) {\n      for (const contact of this.contacts) {\n        if (contact.id === id) return contact;\n      }\n\n      return null;\n    }\n\n    deleteContact(contact) {\n      if (!contact) return;\n      const position = this.contacts.indexOf(contact);\n      if (position < 0) return;\n      this.HTTP.delete(this.HTTP_URL + '/' + contact.id).subscribe(() => {\n        this.contacts.splice(position, 1);\n        this.contactListChangedEvent.next(this.contacts.slice());\n      }); // this.contacts.splice(pos, 1);\n      // this.storeContacts();\n      //this.contactsListClone = this.contacts.slice()\n      //this.contactChangedEvent.emit(this.contacts.slice());\n    }\n\n    addContact(newContact) {\n      if (!newContact) return; // make sure id of the new Document is empty\n\n      newContact.id = '';\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      }); // add to database\n\n      this.HTTP.post(this.HTTP_URL, newContact, {\n        headers: headers\n      }).subscribe(responseData => {\n        // add new document to documents\n        this.contacts.push(responseData.newContact);\n        this.contactListChangedEvent.next(this.contacts.slice());\n      }); // this.maxContactId++;\n      // newContact.id = this.maxContactId.toString();\n      // this.contacts.push(newContact);\n      // //this.contactListChangedEvent.next(this.contacts.slice());\n      // this.storeContacts();\n    }\n\n    updateContact(originalContact, newContact) {\n      if (!originalContact || !newContact) return;\n      const position = this.contacts.indexOf(originalContact);\n      if (position < 0) return;\n      newContact.id = originalContact.id;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      }); // update database\n\n      this.HTTP.put(this.HTTP_URL + \"/\" + originalContact.id, newContact, {\n        headers: headers\n      }).subscribe(() => {\n        this.contacts[position] = newContact;\n        this.contactListChangedEvent.next(this.contacts.slice());\n      }); // this.contacts[position] = newContact;\n      // this.storeContacts();\n      //this.contactListChangedEvent.next(this.contacts.slice());\n    }\n\n  }\n\n  ContactService.ɵfac = function ContactService_Factory(t) {\n    return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactService,\n    factory: ContactService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module"}