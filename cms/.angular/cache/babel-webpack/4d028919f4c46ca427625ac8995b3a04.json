{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MOCKCONTACTS } from './MOCKCONTACTS';\nimport * as i0 from \"@angular/core\";\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    constructor() {\n      this.contactSelectedEvent = new EventEmitter();\n      this.contactChangedEvent = new EventEmitter();\n      this.contactListChangedEvent = new Subject();\n      this.contacts = [];\n      this.contactsListClone = [];\n      this.maxContactId = this.getMaxId();\n      this.contacts = MOCKCONTACTS;\n    }\n\n    getMaxId() {\n      let maxId = 0;\n\n      for (const contact of this.contacts) {\n        const currentId = parseInt(contact.id, 10);\n        if (currentId > maxId) maxId = currentId;\n      }\n\n      return maxId;\n    }\n\n    getContacts() {\n      return this.contacts.slice();\n    }\n\n    getContact(id) {\n      for (const contact of this.contacts) if (contact.id === id) return contact;\n\n      return null;\n    }\n\n    deleteContact(contact) {\n      if (!contact) return;\n      const pos = this.contacts.indexOf(contact);\n      if (pos < 0) return;\n      this.contacts.splice(pos, 1);\n      this.contactsListClone = this.contacts.slice();\n      this.contactChangedEvent.emit(this.contacts.slice());\n    }\n\n    addContact(newContact) {\n      if (!newContact) return;\n      this.maxContactId++;\n      newContact.id = this.maxContactId.toString();\n      this.contacts.push(newContact);\n      this.contactListChangedEvent.next(this.contacts.slice());\n    }\n\n    updateContact(originalContact, newContact) {\n      if (!originalContact || !newContact) return;\n      const position = this.contacts.indexOf(originalContact);\n      if (position < 0) return;\n      newContact.id = originalContact.id;\n      this.contacts[position] = newContact;\n      this.contactListChangedEvent.next(this.contacts.slice());\n    }\n\n  }\n\n  ContactService.ɵfac = function ContactService_Factory(t) {\n    return new (t || ContactService)();\n  };\n\n  ContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactService,\n    factory: ContactService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module"}