{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(HTTP) {\n      this.HTTP = HTTP;\n      this.messageChangedEvent = new EventEmitter();\n      this.messageListChangedEvent = new Subject(); //contacts: Contact [] =[];\n      //HTTP_URL  = environment.apiURL + \"/messages.json\";\n\n      this.HTTP_URL = environment.LOCALURL + \"messages\";\n      this.messages = [];\n      this.HTTP.get(this.HTTP_URL).subscribe(messagesList => {\n        this.messages = messagesList;\n        this.messages.sort((a, b) => parseInt(a.id) > parseInt(b.id) ? 1 : 0);\n        this.messageListChangedEvent.next(this.messages.slice());\n      }, error => {\n        console.log(error);\n      }); //console.log(this.messages);\n      // this.fetchPost();\n      // this.messageListChangedEvent.next(this.messages.slice());\n    }\n\n    fetchPost() {\n      this.HTTP.get(this.HTTP_URL).subscribe(messagesList => {\n        this.messages = messagesList;\n        this.messages.sort((a, b) => parseInt(a.id) > parseInt(b.id) ? 1 : 0);\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    getMessages() {\n      return this.messages.slice();\n    }\n\n    getMessage(id) {\n      if (!this.messages) this.messages = this.getMessages();\n\n      for (const message of this.messages) {\n        if (message.id === id) return message;\n      }\n\n      return null;\n    }\n\n    getSender(id) {\n      for (const message of this.messages) {\n        if (message.id === id) return message;\n      }\n\n      return null;\n    }\n\n    deleteMessage(message) {\n      if (!message) return;\n      const position = this.messages.indexOf(message);\n      if (position < 0) return;\n      this.HTTP.delete(this.HTTP_URL + '/' + message.id).subscribe(() => {\n        this.messages.splice(position, 1);\n        this.messageListChangedEvent.next(this.messages.slice());\n      }); // this.messages.splice(position, 1);\n      // this.storeMessages();\n    }\n\n    addMessage(newMessage) {\n      if (!newMessage.msgText || !newMessage.subject) return; // make sure id of the new Document is empty\n\n      newMessage.id = '';\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      }); // add to database\n\n      this.HTTP.post(this.HTTP_URL, newMessage, {\n        headers: headers\n      }).subscribe(responseData => {\n        // add new document to documents\n        this.messages.push(responseData.newMessage);\n        this.messageListChangedEvent.next(this.messages.slice());\n      }); // this.messages.push(message);\n      // this.storeMessages();\n      // this.messageChangedEvent.emit(this.messages.slice());\n    }\n\n  }\n\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module"}