{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Subject } from 'rxjs';\nimport { Message } from './messages.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(HTTP) {\n      this.HTTP = HTTP;\n      this.messageChangedEvent = new EventEmitter();\n      this.messageListChangedEvent = new Subject();\n      this.contacts = [];\n      this.HTTP_URL = environment.apiURL + \"/messages.json\";\n      this.messages = [];\n      this.fetchPost();\n      this.pingMessages();\n      this.messageListChangedEvent.next(this.messages.slice());\n    }\n\n    fetchPost() {\n      this.HTTP.get(this.HTTP_URL).subscribe(messagesList => {\n        this.messages = messagesList;\n        this.messages.sort((a, b) => parseInt(a.id) > parseInt(b.id) ? 1 : 0);\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    getMessages() {\n      return this.messages.slice();\n    }\n\n    getMessage(id) {\n      if (!this.messages) this.messages = this.getMessages();\n\n      for (const message of this.messages) {\n        if (message.id === id) {\n          return message;\n        }\n      }\n\n      return null;\n    }\n\n    getSender(id) {\n      for (const message of this.messages) {\n        if (message.id === id) {\n          return message;\n        }\n      }\n\n      return null;\n    }\n\n    addMessage(message) {\n      if (!message.msgText || !message.subject) return;\n      this.messages.push(message);\n      this.storeMessages();\n      this.messageChangedEvent.emit(this.messages.slice());\n    }\n\n    pingMessages() {\n      if (this.messages.length > 0) return;\n      let message = new Message(\"123\", \"temp\", \"temp\", \"1\");\n      this.messages.push(message);\n      this.storeMessages();\n      this.messageChangedEvent.emit(this.messages.slice());\n      this.deleteMessage(message);\n    }\n\n    deleteMessage(message) {\n      if (!message) return;\n      const pos = this.messages.indexOf(message);\n      if (pos < 0) return;\n      this.messages.splice(pos, 1);\n      this.storeMessages();\n    }\n\n    storeMessages() {\n      const docsString = JSON.stringify(this.messages);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.HTTP.put(this.HTTP_URL, docsString, httpOptions).subscribe(() => this.messageListChangedEvent.next(this.messages.slice()));\n    }\n\n  }\n\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module"}