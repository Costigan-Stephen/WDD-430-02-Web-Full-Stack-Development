{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //import {MOCKDOCUMENTS} from './MOCKDOCUMENTS';\n\nexport let DocumentService = /*#__PURE__*/(() => {\n  class DocumentService {\n    //private documentsListClone: Document [] =[];\n    //documentSelectedEvent = new EventEmitter<Document>();\n    constructor(HTTP) {\n      this.HTTP = HTTP;\n      this.documentSelectedEvent = new EventEmitter();\n      this.documentChangedEvent = new EventEmitter();\n      this.documentListChangedEvent = new Subject(); //HTTP_URL = environment.apiURL + \"/documents.json\";\n\n      this.HTTP_URL = environment.LOCALURL + \"documents\";\n      this.documents = []; // this.documents = MOCKDOCUMENTS;\n      // this.maxDocId  = this.getMaxId();\n\n      this.HTTP.get(this.HTTP_URL).subscribe(documentsList => {\n        this.documents = documentsList;\n        this.maxDocId = this.getMaxId();\n        this.documents.sort((a, b) => parseInt(a.id) > parseInt(b.id) ? 1 : 0);\n        this.documentListChangedEvent.next(this.documents.slice());\n      }, error => {\n        console.log(error);\n      });\n      console.log(this.documents);\n    }\n\n    getMaxId() {\n      let maxId = 0;\n\n      for (const document of this.documents) {\n        const currentId = parseInt(document.id, 10);\n        if (currentId > maxId) maxId = currentId;\n      }\n\n      return maxId;\n    }\n\n    getDocuments() {\n      return this.documents.slice();\n    }\n\n    getDocument(id) {\n      for (const document of this.documents) if (document.id === id) return document;\n\n      return null;\n    }\n\n    deleteDocument(document) {\n      if (!document) return;\n      const position = this.documents.indexOf(document);\n      if (position < 0) return;\n      this.HTTP.delete(this.HTTP_URL + '/' + document.id).subscribe(() => {\n        this.documents.splice(position, 1);\n        this.documentListChangedEvent.next(this.documents.slice());\n      }); // this.documents.splice(position, 1);\n      // this.documentListChangedEvent.next(this.documents.slice());\n    }\n\n    addDocument(newDocument) {\n      if (!newDocument) return; // make sure id of the new Document is empty\n\n      newDocument.id = '';\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      }); // add to database\n\n      this.HTTP.post(this.HTTP_URL, newDocument, {\n        headers: headers\n      }).subscribe(responseData => {\n        // add new document to documents\n        this.documents.push(responseData.newDocument);\n        this.documentListChangedEvent.next(this.documents.slice());\n      }); // this.maxDocId++;\n      // newDocument.id = this.maxDocId.toString();\n      // this.documents.push(newDocument);\n      // this.storeDocuments();\n    }\n\n    updateDocument(originalDocument, newDocument) {\n      if (!originalDocument || !newDocument) return;\n      const position = this.documents.indexOf(originalDocument);\n      if (position < 0) return; // set the id of the new Document to the id of the old Document\n\n      newDocument.id = originalDocument.id; //newDocument._id = originalDocument._id;\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      }); // update database\n\n      this.HTTP.put(this.HTTP_URL + \"/\" + originalDocument.id, newDocument, {\n        headers: headers\n      }).subscribe(() => {\n        this.documents[position] = newDocument;\n        this.documentListChangedEvent.next(this.documents.slice());\n      }); // newDocument.id = originalDocument.id;\n      // this.documents[position] = newDocument;\n      // this.storeDocuments();\n    }\n\n  }\n\n  DocumentService.ɵfac = function DocumentService_Factory(t) {\n    return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DocumentService,\n    factory: DocumentService.ɵfac,\n    providedIn: 'root'\n  });\n  return DocumentService;\n})();","map":null,"metadata":{},"sourceType":"module"}